<Application x:Class="CatGame.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:CatGame"
             xmlns:viewModels="clr-namespace:CatGame.ViewModels"
             xmlns:views="clr-namespace:CatGame.Views"
             xmlns:helpers="clr-namespace:CatGame.Helpers"
             xmlns:behaviors="clr-namespace:CatGame.Behaviors"
             xmlns:i="http://schemas.microsoft.com/xaml/behaviors">
    
    

    <Application.Resources>
        <FontFamily x:Key="MinecraftFont">pack://application:,,,/CatGame;component/Views/#Minecraft Rus</FontFamily>
        <helpers:PurchaseStatusConverter x:Key="PurchaseStatusConverter"/>
        <helpers:InverseBoolConverter x:Key="InverseBoolConverter"/>
        <helpers:VisibilityToOpacityConverter x:Key="VisibilityToOpacityConverter"/>
        <helpers:ImageScaleConverter x:Key="ImageScaleConverter"/>
        <helpers:ColorIndexToBrushConverter x:Key="ColorIndexToBrushConverter"/>
        <helpers:DirectionConverter x:Key="DirectionConverter"/>
        <helpers:CenterConverter x:Key="CenterConverter"/>
        <helpers:BoolToBlurConverter x:Key="BoolToBlurConverter"/>
        <helpers:HalfSizeConverter x:Key="HalfSizeConverter"/>
        <helpers:ArrowAngleConverter x:Key="ArrowAngleConverter"/>
        <helpers:MoveIndicatorPositionConverter x:Key="MoveIndicatorPositionConverter"/>
        <helpers:ColorForMoveIndicatorConverter x:Key="ColorForMoveIndicatorConverter"/>
        <helpers:MultipleBooleansToBlurConverter x:Key="MultipleBooleansToBlurConverter"/>

        <Style TargetType="TextBlock">
            <Setter Property="FontFamily" Value="{StaticResource MinecraftFont}"/>
            <Setter Property="Foreground" Value="#FF2D2D2D"/>
            <!-- Общий цвет текста -->
        </Style>
        <Style x:Key="TabButtonStyle" TargetType="Button">
            <Setter Property="Margin" Value="10"/>
            <Setter Property="Padding" Value="20,10"/>
            <Setter Property="FontSize" Value="20"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Background" Value="#FFE9A5B5"/>
        </Style>

        <Style TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
            <Setter Property="behaviors:SoundBehaviorAttacher.EnableSound" Value="True"/>
            <Setter Property="FontFamily" Value="{StaticResource MinecraftFont}"/>
            <Setter Property="FontSize" Value="24"/>
        </Style>
        <!-- Стиль для всех заголовков -->
        <Style x:Key="HeaderText" TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
            <Setter Property="FontSize" Value="72"/>
            <Setter Property="Foreground" Value="#FFF5649E"/>
        </Style>
        <helpers:BoolToVisibilityConverter x:Key="BoolToVisibility"/>
        <ElasticEase x:Key="ElasticEase" 
                EasingMode="EaseOut" 
                Oscillations="1" 
                Springiness="3"/>

        <SineEase x:Key="SineEaseOut" 
             EasingMode="EaseOut"/>

        <SineEase x:Key="SineEaseInOut" 
             EasingMode="EaseInOut"/>
        <QuadraticEase x:Key="QuadraticEaseOut" EasingMode="EaseOut"/>
        <CubicEase x:Key="CubicEaseInOut" EasingMode="EaseInOut"/>
        <ElasticEase x:Key="ElasticEaseOut" EasingMode="EaseOut" Oscillations="1"/>
        <SineEase x:Key="SineEaseIn" EasingMode="EaseIn"/>
        <BackEase x:Key="BackEaseOut" EasingMode="EaseOut" Amplitude="0.5"/>
        <BounceEase x:Key="BounceEaseSoft" Bounces="2" Bounciness="1" EasingMode="EaseOut"/>
        <BounceEase x:Key="BounceEaseOut" 
               EasingMode="EaseOut" 
               Bounces="2" 
               Bounciness="1.5"/>

        <CircleEase x:Key="CircleEaseOut" 
               EasingMode="EaseOut"/>

        <BackEase x:Key="BackEaseIn" 
             EasingMode="EaseIn" 
             Amplitude="0.3"/>

        <CubicEase x:Key="CubicEaseIn" 
              EasingMode="EaseIn"/>

        <CubicEase x:Key="CubicEaseOut" 
              EasingMode="EaseOut"/>

        <!-- Стили -->
        <Style x:Key="PauseMenuStyle" TargetType="ContentControl">
            <Setter Property="Template">
                <Setter.Value>
                    <!-- Добавьте этот тег -->
                    <ControlTemplate>
                        <views:PauseMenuView/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="Image" x:Key="CatStyle">
            <Setter Property="Source" Value="/Views/кoтправо.png"/>
            <Setter Property="Width" Value="200"/>
            <Setter Property="Height" Value="200"/>
        </Style>
        <Style x:Key="SkinImageStyle" TargetType="Image">
            <Setter Property="Width" Value="200"/>
            <Setter Property="Height" Value="200"/>
            <Setter Property="Stretch" Value="UniformToFill"/>
            <Setter Property="RenderOptions.BitmapScalingMode" Value="HighQuality"/>
            <Setter Property="HorizontalAlignment" Value="Center"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
        </Style>
        <Style x:Key="MainButtonStyle" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
            <Setter Property="Width" Value="300"/>
            <Setter Property="Height" Value="80"/>
            <Setter Property="Margin" Value="10"/>
            <Setter Property="FontSize" Value="24"/>
            <Setter Property="Background" Value="#FFF9BFCD"/>
            <Setter Property="BorderBrush" Value="#FFE9A5B5"/>
            <Setter Property="BorderThickness" Value="2"/>
        </Style>

        <Style x:Key="InvisibleButtonStyle" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Padding" Value="0"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Background="Transparent">
                            <ContentPresenter/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Cursor" Value="Hand"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="ImageButtonStyle" TargetType="Button">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Grid>
                            <Image Source="{TemplateBinding Tag}"
                           Stretch="Uniform"
                           Width="180" 
                           Height="40"/>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Padding" Value="0"/>
        </Style>
        <Style x:Key="FocusStyle" TargetType="Control">
            <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        </Style>

        <!-- DataTemplates -->
        <DataTemplate DataType="{x:Type viewModels:MainMenuViewModel}">
            <views:MainMenuView/>
        </DataTemplate>

        <DataTemplate DataType="{x:Type viewModels:MainGameScreenViewModel}">
            <views:MainGameScreenView/>
        </DataTemplate>

        <DataTemplate DataType="{x:Type viewModels:ShopViewModel}">
            <views:ShopView/>
        </DataTemplate>

        <DataTemplate DataType="{x:Type viewModels:MiniGame1ViewModel}">
            <views:MiniGame1View/>
        </DataTemplate>

        <DataTemplate DataType="{x:Type viewModels:MiniGamesMenuViewModel}">
            <views:MiniGamesMenuView/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type viewModels:PauseMenuViewModel}">
            <views:PauseMenuView/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type viewModels:GameOverViewModel}">
            <views:GameOverView/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type viewModels:MiniGame2ViewModel}">
            <views:MiniGame2View/>
        </DataTemplate>
    </Application.Resources>
</Application>